// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  rol_id   String @id @default(uuid())
  rol_name String @unique
  User     User[]

  @@map("roles")
}

model Country {
  country_id   String @id @default(uuid())
  country_name String @unique
  City         City[]

  @@map("countries")
}

model City {
  city_id    String     @id @default(uuid())
  country    Country    @relation(fields: [country_id], references: [country_id])
  country_id String
  city_name  String
  User       User[]
  JobOffer   JobOffer[]

  @@map("cities")
}

model User {
  user_id        String           @id @default(uuid())
  email          String           @unique
  user_name      String
  password       String
  is_active      Boolean          @default(true)
  city           City             @relation(fields: [city_id], references: [city_id])
  city_id        String
  rol            Rol              @relation(fields: [rol_id], references: [rol_id])
  rol_id         String
  creation_date  DateTime         @default(now())
  updated_date   DateTime         @updatedAt
  Collaborator   Collaborator?
  Company        Company?
  SkillLevelUser SkillLevelUser[]
  New            New[]
  LikeNew        LikeNew[]
  JobOffer       JobOffer[]
  ForumQuestion  ForumQuestion[]
  ForumResponse  ForumResponse[]
  NewComment     NewComment[]
  CoursesUsers   CoursesUsers[]

  @@map("users")
}

model Collaborator {
  user            User   @relation(fields: [collaborator_id], references: [user_id])
  collaborator_id String @unique
  phone_number    String

  @@map("collaborators")
}

model Company {
  user         User   @relation(fields: [company_id], references: [user_id])
  company_id   String @unique
  contact_name String
  phone_number String

  @@map("companies")
}

model Skill {
  skill_id       String           @id @default(uuid())
  skill_name     String           @unique
  SkillLevelUser SkillLevelUser[]

  @@map("skills")
}

model Level {
  level_id       String           @id @default(uuid())
  level_name     String           @unique
  SkillLevelUser SkillLevelUser[]

  @@map("levels")
}

model SkillLevelUser {
  user     User   @relation(fields: [user_id], references: [user_id])
  user_id  String
  level    Level  @relation(fields: [level_id], references: [level_id])
  level_id String
  skill    Skill  @relation(fields: [skill_id], references: [skill_id])
  skill_id String

  @@unique([user_id, level_id, skill_id])
  @@map("skill_lvl_usr")
}

model New {
  new_id        String       @id @default(uuid())
  user          User         @relation(fields: [user_id], references: [user_id])
  user_id       String
  new_title     String
  new_text      String
  img_url       String
  accepted      Boolean      @default(false)
  is_active     Boolean      @default(true)
  creation_date DateTime     @default(now())
  updated_date  DateTime     @updatedAt
  LikeNew       LikeNew[]
  NewComment    NewComment[]

  @@map("news")
}

model NewComment {
  comment_id    String   @id @default(uuid())
  user          User     @relation(fields: [user_id], references: [user_id])
  user_id       String
  new           New      @relation(fields: [new_id], references: [new_id])
  new_id        String
  comment_text  String
  is_active     Boolean  @default(true)
  creation_date DateTime @default(now())
  updated_date  DateTime @updatedAt

  @@map("new_comments")
}

model LikeNew {
  like_id   Int     @id @default(autoincrement())
  user      User    @relation(fields: [user_id], references: [user_id])
  user_id   String
  new       New     @relation(fields: [new_id], references: [new_id])
  new_id    String
  is_active Boolean @default(true)

  @@map("likes_news")
}

model JobOffer {
  job_offer_id  String   @id @default(uuid())
  user          User     @relation(fields: [user_id], references: [user_id])
  user_id       String
  city          City     @relation(fields: [city_id], references: [city_id])
  city_id       String
  offer_text    String
  offer_title   String
  is_active     Boolean  @default(true)
  creation_date DateTime @default(now())
  updated_date  DateTime @updatedAt

  @@map("job_offers")
}

model ForumQuestion {
  question_id    String          @id @default(uuid())
  user           User            @relation(fields: [user_id], references: [user_id])
  user_id        String
  question_text  String
  question_title String
  is_active      Boolean         @default(true)
  creation_date  DateTime        @default(now())
  updated_date   DateTime        @updatedAt
  ForumResponse  ForumResponse[]

  @@map("forum_questions")
}

model ForumResponse {
  response_id   String        @id @default(uuid())
  user          User          @relation(fields: [user_id], references: [user_id])
  user_id       String
  question      ForumQuestion @relation(fields: [question_id], references: [question_id])
  question_id   String
  response_text String
  is_active     Boolean       @default(true)
  creation_date DateTime      @default(now())
  updated_date  DateTime      @updatedAt

  @@map("forum_responses")
}

model CourseCategory {
  category_id   Int      @id @default(autoincrement())
  category_name String
  Course        Course[]

  @@map("course_categories")
}

model CourseStatus {
  status_id    Int            @id @default(autoincrement())
  status_name  String
  CoursesUsers CoursesUsers[]

  @@map("course_status")
}

enum CourseType {
  ONSITE
  ONLINE
}

model Course {
  course_id          String         @id @default(uuid())
  course_name        String
  course_description String
  img_url            String
  total_steps        Int
  course_type        CourseType
  course_date        DateTime
  CategoryCourse     CourseCategory @relation(fields: [category_id], references: [category_id])
  category_id        Int
  is_active          Boolean        @default(true)
  creation_date      DateTime       @default(now())
  updated_date       DateTime       @updatedAt
  Video              Video[]
  Test               Test[]
  CoursesUsers       CoursesUsers[]

  @@map("courses")
}

model Video {
  video_id  String @id @default(uuid())
  course    Course @relation(fields: [course_id], references: [course_id])
  course_id String
  video_url String
  position  Int

  @@map("videos")
}

model Test {
  test_id        String   @id @default(uuid())
  course         Course   @relation(fields: [course_id], references: [course_id])
  course_id      String
  question       String
  option_1       String
  option_2       String
  option_3       String
  option_4       String
  correct_answer String
  position       Int
  is_active      Boolean  @default(true)
  creation_date  DateTime @default(now())
  updated_date   DateTime @updatedAt

  @@map("tests")
}

model CoursesUsers {
  Course       Course       @relation(fields: [course_id], references: [course_id])
  course_id    String
  User         User         @relation(fields: [user_id], references: [user_id])
  user_id      String
  CourseStatus CourseStatus @relation(fields: [status_id], references: [status_id])
  status_id    Int
  step         Int

  @@unique([user_id, course_id, status_id])
  @@map("courses_users")
}
